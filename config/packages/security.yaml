security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
          pattern: ^/api
          stateless: true
          provider: app_user_provider
          jwt: ~
          refresh_jwt:
            check_path: /api/token/refresh
          entry_point: jwt
        main:
          pattern: ^/
          stateless: false
          provider: app_user_provider
          jwt: ~
          entry_point: jwt
          logout:
            path: app_logout
            target: app_login

                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/api/login, roles: PUBLIC_ACCESS }
         - { path: ^/api/token/refresh, roles: PUBLIC_ACCESS }
         - { path: ^/api, roles: PUBLIC_ACCESS }
         - { path: ^/_wdt, roles: PUBLIC_ACCESS }
         - { path: ^/form, roles: ROLE_USER }
         - { path: ^/profile, roles: ROLE_USER }
         - { path: ^/history, roles: ROLE_USER  }
         - { path: ^/verify/email, roles: PUBLIC_ACCESS }
         - { path: ^/about, roles: PUBLIC_ACCESS  }
         - { path: ^/sign_in, roles: PUBLIC_ACCESS  }
         - { path: ^/chart, roles: PUBLIC_ACCESS }
         - { path: ^/theme/create, roles: IS_AUTHENTICATED_FULLY }
         - { path: ^/theme/update, roles: IS_AUTHENTICATED_FULLY }
         - { path: ^/theme/delete, roles: IS_AUTHENTICATED_FULLY }
         - { path: ^/theme, roles: PUBLIC_ACCESS }
         - { path: ^/daily-theme, roles: PUBLIC_ACCESS }
         - { path: ^/synthesis/create, roles: IS_AUTHENTICATED_FULLY }
         - { path: ^/synthesis/update, roles: IS_AUTHENTICATED_FULLY }
         - { path: ^/synthesis/delete, roles: IS_AUTHENTICATED_FULLY }
         - { path: ^/synthesis, roles: PUBLIC_ACCESS }
         - { path: ^/commentary/create, roles: IS_AUTHENTICATED_FULLY }
         - { path: ^/commentary/update, roles: IS_AUTHENTICATED_FULLY }
         - { path: ^/commentary/delete, roles: IS_AUTHENTICATED_FULLY }
         - { path: ^/commentaries, roles: PUBLIC_ACCESS }
         - { path: ^/commentary, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
